{"version":3,"file":"index.mjs","sources":["../lib/frexp.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar normalize = require( '@stdlib/number-float64-base-normalize' );\nvar floatExp = require( '@stdlib/number-float64-base-exponent' );\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar fromWords = require( '@stdlib/number-float64-base-from-words' );\n\n\n// VARIABLES //\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Exponent equal to 1022 (BIAS-1): 0 01111111110 00000000000000000000 => 1071644672\nvar SET_EXP_MASK = 0x3fe00000|0; // asm type annotation\n\n// Normalization workspace:\nvar X = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var out = frexp( new Array( 2 ), 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* @example\n* var out = frexp( new Array( 2 ), 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = frexp( new Array( 2 ), -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* @example\n* var out = frexp( new Array( 2 ), NaN );\n* // returns [ NaN, 0 ]\n*\n* @example\n* var out = frexp( new Array( 2 ), Infinity );\n* // returns [ Infinity , 0 ]\n*\n* @example\n* var out = frexp( new Array( 2 ), -Infinity );\n* // returns [ -Infinity , 0 ]\n*/\nfunction frexp( out, x ) {\n\tvar high;\n\tvar exp;\n\tif (\n\t\tx === 0.0 || // handles -0\n\t\tisnan( x ) ||\n\t\tisInfinite( x )\n\t) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0;\n\t\treturn out;\n\t}\n\t// If `x` is subnormal, normalize it...\n\tnormalize( X, x );\n\n\t// Extract the exponent from `x` and add the normalization exponent:\n\texp = floatExp( X[0] ) + X[ 1 ] + 1;\n\n\t// Break `x` into two unsigned 32-bit integers (higher and lower order words):\n\ttoWords( WORDS, X[ 0 ] );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits within the higher order word to BIAS-1 (1023-1=1022):\n\thigh |= SET_EXP_MASK;\n\n\t// Create a new floating-point number:\n\tx = fromWords( high, WORDS[ 1 ] );\n\n\tout[ 0 ] = x;\n\tout[ 1 ] = exp;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = frexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './frexp.js' );\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var out = frexp( 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var out = new Float64Array( 2 );\n*\n* var y = frexp( out, 4.0 );\n* // returns <Float64Array>[ 0.5, 3 ]\n*\n* var bool = ( y === out );\n* // returns true\n*\n* @example\n* var out = frexp( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = frexp( -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* @example\n* var out = frexp( NaN );\n* // returns [ NaN, 0 ]\n*\n* @example\n* var out = frexp( Infinity );\n* // returns [ Infinity , 0 ]\n*\n* @example\n* var out = frexp( -Infinity );\n* // returns [ -Infinity , 0 ]\n*/\nfunction frexp( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn fcn( [ 0.0, 0 ], out );\n\t}\n\treturn fcn( out, x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = frexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @module @stdlib/math-base-special-frexp\n*\n* @example\n* var frexp = require( '@stdlib/math-base-special-frexp' );\n*\n* var out = frexp( 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* out = frexp( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* out = frexp( -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* out = frexp( NaN );\n* // returns [ NaN, 0 ]\n*\n* out = frexp( Infinity );\n* // returns [ Infinity , 0 ]\n*\n* out = frexp( -Infinity );\n* // returns [ -Infinity , 0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var frexp = require( '@stdlib/math-base-special-frexp' );\n*\n* var out = new Float64Array( 2 );\n*\n* var y = frexp( out, 4.0 );\n* // returns <Float64Array>[ 0.5, 3 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar frexp = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = frexp;\n"],"names":["isnan","require$$0","isInfinite","require$$1","normalize","require$$2","floatExp","require$$3","toWords","require$$4","fromWords","require$$5","X","WORDS","fcn","out","x","high","exp","lib","arguments","length"],"mappings":";;8jBAsBA,IAAIA,EAAQC,EACRC,EAAaC,EACbC,EAAYC,EACZC,EAAWC,EACXC,EAAUC,EACVC,EAAYC,EAYZC,EAAI,CAAE,EAAK,GAGXC,EAAQ,CAAE,EAAG,GA4EjB,IChGIC,EDyDJ,SAAgBC,EAAKC,GACpB,IAAIC,EACAC,EACJ,OACO,IAANF,GACAhB,EAAOgB,IACPd,EAAYc,IAEZD,EAAK,GAAMC,EACXD,EAAK,GAAM,EACJA,IAGRX,EAAWQ,EAAGI,GAGdE,EAAMZ,EAAUM,EAAE,IAAOA,EAAG,GAAM,EAGlCJ,EAASK,EAAOD,EAAG,IACnBK,EAAOJ,EAAO,GAGdI,GArEoB,WA2EpBD,EAAIN,EAHJO,GArEkB,WAwEGJ,EAAO,IAE5BE,EAAK,GAAMC,EACXD,EAAK,GAAMG,EACJH,ICjCR,ICbAI,EDGA,SAAgBJ,EAAKC,GACpB,OAA0B,IAArBI,UAAUC,OACPP,EAAK,CAAE,EAAK,GAAKC,GAElBD,EAAKC,EAAKC"}